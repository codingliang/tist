<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<context:component-scan base-package="njxzc.royxu,com.core" />
	<!-- 支持aop注解 -->
	<aop:aspectj-autoproxy />
	<context:property-placeholder location="classpath:/hibernate.properties" />

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${dataSource.driverClassName}" />
		<property name="url" value="${dataSource.url}" />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${dataSource.dialect}</prop>
				<prop key="hibernate.hbm2ddl.auto">${dataSource.hbm2ddl.auto}</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>njxzc.royxu.domain</value><!-- 扫描实体类，也就是平时所说的model -->
			</list>
		</property>
	</bean>

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
		<property name="cacheQueries"  value="false"></property>
	</bean>

	<!-- 配置事务管理 -->
<!-- 声明一个事务管理器  注入sessionfactory属性 -->

    <bean id="myHibTransactionManager"  class="org.springframework.orm.hibernate3.HibernateTransactionManager">

       <property name="sessionFactory" ref="sessionFactory"></property>

    </bean>

     

     <!-- 通过<tx:advice>定义事务通知  需要指定一个事务管理器  ，然后在其属性中声明事务规则 -->

    <tx:advice id="txAdvice" transaction-manager="myHibTransactionManager">

           <tx:attributes>

              <!-- required表示当前方法必须运行在一个事务环境中  ，如果一个现有事务正在运行中，该方法将运行这个事务， 否则，   就要开始一个新的事务。 -->

              <!-- supports 表示当前方法不需要事务处理环境， 但如果有一个事务正在运行时，这个方法也可以运行在这个事务里 -->

             

              <tx:method name="save*" propagation="SUPPORTS"/>

              <tx:method name="delete*" propagation="SUPPORTS"/>

              <tx:method name="update*" propagation="SUPPORTS"/>

              <tx:method name="find*" propagation="SUPPORTS"/>
              
  			  <tx:method name="get*" read-only="true" propagation="REQUIRED" />

           </tx:attributes>

    </tx:advice>

    <aop:config>
    
       <!-- 定义一个切面（pointcut  即定义哪些方法应用这些规则） -->

       <aop:pointcut id="bizMethods" expression="execution( * njxzc.royxu.service.*.*(..))"/>

      

       <!-- 将事务通知和切面组合 -->

       <aop:advisor advice-ref="txAdvice" pointcut-ref="bizMethods"/>

    </aop:config>

</beans>